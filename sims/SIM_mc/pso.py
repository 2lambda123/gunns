#!/usr/bin/env python3
# Copyright 2023 United States Government as represented by the Administrator of the
# National Aeronautics and Space Administration.  All Rights Reserved.
#
# TODO
# - wraps the sim, loops over epochs, managing swarm state between epochs,
#   calls the sim to do an MC run w/ parallel slaves as a system call for each epoch
# - outputs final swarm state to a file, can use a file to init swarm state

import sys
import subprocess
import random

# compare total run time vs. series:
# this   30x100, 10 s runs: 1m 45s
# series 30x100, 10 s runs: 1m 24s
# What about for longer runs?
# this   30x100, 1000 s runs: 2m 05s 
# series 30x100, 1000 s runs: 4m 55s 
# Good, this starts to outperform serial as runs get to a more realistic length.

MAX_EPOCH     = 4
INITIAL_DISTR = 'MIN_MAX_CORNERS'
INERTIA_START = 0.5
INERTIA_END   = 0.5

def write_epoch_config(epoch, distribution, inertia, seed):
    render = "# This is auto-generated by the PSO swarm manager script, defining the\n" \
           + "# PSO model state for the current epoch.\n" \
           + "#\n" \
           + "thePsoConfig.mRandomSeed       = " + str(seed) + "\n" \
           + "thePsoConfig.mInertiaWeight    = " + str(inertia) + "\n" \
           + "thePsoConfig.mInertiaWeightEnd = " + str(inertia) + "\n" \
           + "thePsoConfig.mInitDistribution = trick.GunnsOptimPsoConfigData." + distribution + "\n"
    epoch_config_filename = "RUN_mc/epoch_configuration.py"
    with open(epoch_config_filename, 'w') as f:
        f.write(render)
        f.close()

# Return a new seed for the sim's random.  Sim's C++ srand takes an unsigned int,
# so we want a seed between 0 and UINT_MAX 0xffffffff.
# Since each epoch runs a separate instance of the sim executable, the sim needs
# to be given a different seed for it random generator each instance, otherwise
# the particles will see the same random numbers every epoch and won't act random.
def getSimSeed():
    return random.randint(0, 0xffffffff)
    
def main():
    print("I am a PSO manager script")
    
    # Set the random seed for repeatability.
    random.seed(42)
    
    # write the configuration file for the 0th epoch
    write_epoch_config(1, INITIAL_DISTR, INERTIA_START, getSimSeed())
    
    # main epoch loop
    for epoch in range(1, MAX_EPOCH + 1):
        print("!!!!!!!!!!!!!!!!!!!!!!")
        print("PSO MANAGER EPOCH: ", epoch)
        print("!!!!!!!!!!!!!!!!!!!!!!")
        cmd_str = "./S_main* RUN_mc/input_single_epoch.py"
        subprocess.run(cmd_str, shell=True)
        
        # TODO handle swarm state between epochs
        # - First epoch starts the sim with the user-defined initial swarm state
        #   subsequent epochs use the swarm state file
        # - update the inertia weight annealing effect
        seed = random.randint(0, 0xffffffff)
        inertia = INERTIA_START + (INERTIA_END - INERTIA_START) * epoch / max(1, MAX_EPOCH - 1)
        write_epoch_config(epoch, 'FILE_CONTINUOUS', inertia, getSimSeed())
        
    sys.exit(0)

if __name__ == "__main__":
    main()


