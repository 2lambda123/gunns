#ifndef TestFluidNetwork_EXISTS
#define TestFluidNetwork_EXISTS

/**
@file  TestFluidNetwork.hh
@brief TestFluidNetwork GUNNS Fluid Network declarations.

@copyright  Copyright 2019 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

@defgroup  GUNNS_TESTFLUIDNETWORK TestFluidNetwork GUNNS Fluid Network
@ingroup  GUNNS

@details
PURPOSE: (Provides classes for the TestFluidNetwork GUNNS Fluid Network.)

REFERENCES:
  ()

ASSUMPTIONS AND LIMITATIONS:
  ()

LIBRARY DEPENDENCY:
  ((TestFluidNetwork.o))

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version beta 13) (2019-12-11 07:14:42.930523))

@{
*/

#include "software/SimCompatibility/TsSimCompatibility.hh"
#include "core/network/GunnsNetworkBase.hh"
#include "aspects/fluid/capacitor/GunnsFluidTank.hh"
#include "core/GunnsFluidConductor.hh"

// Forward-declare the main network class for use in the config data.
class TestFluidNetwork;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Data structure for TestFluidNetwork GUNNS network mass fractions.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct TestFluidNetworkFractions {
    double GUNNS_H2;
    double GUNNS_CH4;
    double GUNNS_CO2;
    double GUNNS_H2O;
    double GUNNS_O2;
    double GUNNS_N2;
} TestFluidNetworkFractions;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Union for TestFluidNetwork GUNNS network mass fractions as scalars and as an array.
///         The array is used as an argument in the PolyFluidInputData constructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////
union TestFluidNetworkMassFractions {
    TestFluidNetworkFractions scalar;
    double array[sizeof(TestFluidNetworkFractions)/sizeof(double)];
    TestFluidNetworkMassFractions(
        const double iGUNNS_H2,
        const double iGUNNS_CH4,
        const double iGUNNS_CO2,
        const double iGUNNS_H2O,
        const double iGUNNS_O2,
        const double iGUNNS_N2);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    TestFluidNetwork GUNNS Network Config Data
///
/// @details  Configuration data class for the TestFluidNetwork Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class TestFluidNetworkConfigData
{
    public:
        /// @brief  Enumeration of the number of internal constituent fluids in this network.
        enum {N_INTERNAL_FLUIDS = 6};
        // Network fluid configurations
        static FluidProperties::FluidType netInternalFluidTypes[TestFluidNetworkConfigData::N_INTERNAL_FLUIDS];    /**< (--) trick_chkpnt_io(**) Network internal fluid types array. */
        // Solver configuration data
        GunnsConfigData netSolver;    /**< (--) trick_chkpnt_io(**) Network solver config data. */ 
        // Spotters configuration data
        // Links configuration data
        GunnsFluidConductorConfigData conductor1;    /**< (--) trick_chkpnt_io(**) conductor1 config data. */
        GunnsFluidTankConfigData tank;    /**< (--) trick_chkpnt_io(**) tank config data. */
        GunnsFluidConductorConfigData leak;    /**< (--) trick_chkpnt_io(**) leak config data. */
        /// @brief  Default constructs this network configuration data.
        TestFluidNetworkConfigData(const std::string& name, TestFluidNetwork* network);
        /// @brief  Default destructs this network configuration data.
        virtual ~TestFluidNetworkConfigData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        TestFluidNetworkConfigData(const TestFluidNetworkConfigData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        TestFluidNetworkConfigData& operator =(const TestFluidNetworkConfigData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    TestFluidNetwork GUNNS Network Input Data
///
/// @details  Input data class for the TestFluidNetwork Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class TestFluidNetworkInputData
{
    public:
        // Internal network fluids
        TestFluidNetworkMassFractions fluidDefaultFractions;    /**< (--) trick_chkpnt_io(**) Fluid mass fractions. */
        PolyFluidInputData fluidDefault;    /**< (--) trick_chkpnt_io(**) Fluid input data. */
        TestFluidNetworkMassFractions fluidTankFractions;    /**< (--) trick_chkpnt_io(**) Fluid mass fractions. */
        PolyFluidInputData fluidTank;    /**< (--) trick_chkpnt_io(**) Fluid input data. */
        // Spotters input data
        // Links input data
        GunnsFluidConductorInputData conductor1;    /**< (--) trick_chkpnt_io(**) conductor1 input data. */
        GunnsFluidTankInputData tank;    /**< (--) trick_chkpnt_io(**) tank input data. */
        GunnsFluidConductorInputData leak;    /**< (--) trick_chkpnt_io(**) leak input data. */
        /// @brief  Default constructs this network input data.
        TestFluidNetworkInputData(TestFluidNetwork* network);
        /// @brief  Default destructs this network input data.
        virtual ~TestFluidNetworkInputData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        TestFluidNetworkInputData(const TestFluidNetworkInputData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        TestFluidNetworkInputData& operator =(const TestFluidNetworkInputData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    TestFluidNetwork GUNNS Network
///
/// @details  Main class for the TestFluidNetwork Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class TestFluidNetwork : public GunnsNetworkBase
{
    TS_MAKE_SIM_COMPATIBLE(TestFluidNetwork);
    public:
        /// @brief  Enumeration of the TestFluidNetwork Network nodes.
        enum Nodes
        {
            Node0 = 0,    ///< Node 0
            Node1 = 1,    ///< Node 1
            GROUND = 2,    ///< Ground Node
            N_NODES = 3    ///< Number of nodes including Ground
        };
        // Network declarations
        GunnsFluidNode netNodes[TestFluidNetwork::N_NODES];    /**< (--) Network nodes array. */
        TestFluidNetworkConfigData netConfig;    /**< (--) trick_chkpnt_io(**) Network config data. */
        TestFluidNetworkInputData netInput;    /**< (--) trick_chkpnt_io(**) Network input data. */
        const DefinedFluidProperties netFluidProperties;        /**< (--) trick_chkpnt_io(**) Network defined fluid properties. */
        PolyFluidConfigData          netInternalFluidConfig;    /**< (--) trick_chkpnt_io(**) Network internal fluid config. */
        // Data Tables
        // Spotters
        // Links
        GunnsFluidConductor conductor1;    /**< (--) conductor1 instance. */
        GunnsFluidTank tank;    /**< (--) tank instance. */
        GunnsFluidConductor leak;    /**< (--) leak instance. */
        /// @brief  Default constructs this network.
        TestFluidNetwork(const std::string& name = "");
        /// @brief  Default destructs this network.
        virtual ~TestFluidNetwork();
        /// @brief  Network nodes initialization task.
        virtual void initNodes(const std::string& name);
        /// @brief  Network links & spotters initialization task.
        virtual void initNetwork();
        /// @brief  Update network spotters before the solver solution.
        virtual void stepSpottersPre(const double timeStep);
        /// @brief  Update network spotters after the solver solution.
        virtual void stepSpottersPost(const double timeStep);
        /// @brief  Returns this network's fluid configuration.
        virtual const PolyFluidConfigData* getFluidConfig() const;

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        TestFluidNetwork(const TestFluidNetwork&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        TestFluidNetwork& operator =(const TestFluidNetwork&);
};

/// @}  

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @returns  PolyFluidConfigData* (--) Pointer to this network's fluid configuration.
///
/// @details  Returns this network's fluid configuration.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline const PolyFluidConfigData* TestFluidNetwork::getFluidConfig() const
{
    return &netInternalFluidConfig;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] iGUNNS_H2 (--) Mass fraction of the GUNNS_H2 constituent in the composite fluid.
/// @param[in] iGUNNS_CH4 (--) Mass fraction of the GUNNS_CH4 constituent in the composite fluid.
/// @param[in] iGUNNS_CO2 (--) Mass fraction of the GUNNS_CO2 constituent in the composite fluid.
/// @param[in] iGUNNS_H2O (--) Mass fraction of the GUNNS_H2O constituent in the composite fluid.
/// @param[in] iGUNNS_O2 (--) Mass fraction of the GUNNS_O2 constituent in the composite fluid.
/// @param[in] iGUNNS_N2 (--) Mass fraction of the GUNNS_N2 constituent in the composite fluid.
///
/// @details  Constructs the mass fraction union from the scalar mass fraction arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline TestFluidNetworkMassFractions::TestFluidNetworkMassFractions (
    const double iGUNNS_H2,
    const double iGUNNS_CH4,
    const double iGUNNS_CO2,
    const double iGUNNS_H2O,
    const double iGUNNS_O2,
    const double iGUNNS_N2)
{
    scalar.GUNNS_H2 = iGUNNS_H2;
    scalar.GUNNS_CH4 = iGUNNS_CH4;
    scalar.GUNNS_CO2 = iGUNNS_CO2;
    scalar.GUNNS_H2O = iGUNNS_H2O;
    scalar.GUNNS_O2 = iGUNNS_O2;
    scalar.GUNNS_N2 = iGUNNS_N2;
}

#endif
