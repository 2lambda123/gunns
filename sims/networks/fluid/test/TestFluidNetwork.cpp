/**
@file  TestFluidNetwork.cpp
@brief TestFluidNetwork GUNNS Fluid Network implementation.

@copyright  Copyright 2019 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

LIBRARY DEPENDENCY:
(
  (aspects/fluid/capacitor/GunnsFluidTank.o)
  (core/GunnsFluidConductor.o)
  (core/network/GunnsNetworkBase.o)
)

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version beta 13) (2019-12-11 07:14:42.930523))
*/

#include "TestFluidNetwork.hh"
#include "simulation/hs/TsHsMsg.hh"
#include "software/exceptions/TsInitializationException.hh"

/// @details  Loads constituent fluid types into the network's internal fluid types array.
FluidProperties::FluidType TestFluidNetworkConfigData::netInternalFluidTypes[TestFluidNetworkConfigData::N_INTERNAL_FLUIDS] =
{
    FluidProperties::GUNNS_H2,
    FluidProperties::GUNNS_CH4,
    FluidProperties::GUNNS_CO2,
    FluidProperties::GUNNS_H2O,
    FluidProperties::GUNNS_O2,
    FluidProperties::GUNNS_N2
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name    (--) Name of the network for H&S messages.
/// @param[in] network (--) Pointer to the main network object.
/// 
/// @details  Default constructs the TestFluidNetwork Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetworkConfigData::TestFluidNetworkConfigData(const std::string& name, TestFluidNetwork* network)
    :
    netSolver(name + ".netSolver", 1.0000, 0.001, 10, 1),
    // Spotter Config Data
    // Link Config Data
    conductor1(name + ".conductor1", &network->netNodeList, 1.0E-6, 0.1),
    tank(name + ".tank", &network->netNodeList, 0.1, 0.0, 0.0, 1.0E-05, 3.0, 0.01),
    leak(name + ".leak", &network->netNodeList, 1.0E-8, 0.0)
{
    // Load config data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the TestFluidNetwork Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetworkConfigData::~TestFluidNetworkConfigData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] network (--) Pointer to the main network object.
///
/// @details  Default constructs the TestFluidNetwork Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetworkInputData::TestFluidNetworkInputData(TestFluidNetwork* network)
    :
    fluidDefaultFractions(8.0E-06, 2.3E-05, 0.007661, 0.002367, 0.239926, 0.750015),
    fluidDefault(290.0, 101.325, 0.0, 1.0, fluidDefaultFractions.array, 0),
    fluidTankFractions(0.0, 0.0, 0.0, 0.0, 0.0, 1.0),
    fluidTank(290.0, 101.325, 0.0, 1.0, fluidTankFractions.array, 0),
    // Spotter Input Data
    // Link Input Data
    conductor1(false, 0.0),
    tank(false, 0.0, 1.0, &fluidTank, 295.0, 0.0),
    leak(false, 0.0)
{
    // Load input data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the TestFluidNetwork Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetworkInputData::~TestFluidNetworkInputData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Default constructs the TestFluidNetwork Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetwork::TestFluidNetwork(const std::string& name)
    :
    GunnsNetworkBase(name, N_NODES, netNodes),
    netNodes(),
    netConfig(name, this),
    netInput(this),
    netFluidProperties(),
    netInternalFluidConfig(&netFluidProperties, netConfig.netInternalFluidTypes, TestFluidNetworkConfigData::N_INTERNAL_FLUIDS),
    // Data Tables 
    // Spotters
    // Links
    conductor1(),
    tank(),
    leak()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details Default destructs the TestFluidNetwork Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestFluidNetwork::~TestFluidNetwork()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Initializes the nodes with their config and input data objects.  The nodes are
///           initialized through the node list object, which may point to this network's nodes
///           (when this is a standalone network), or the super-network's nodes (as a sub-network).
////////////////////////////////////////////////////////////////////////////////////////////////////
void TestFluidNetwork::initNodes(const std::string& name)
{
    /// - Initialize the nodes.
    GunnsFluidNode* nodes = static_cast<GunnsFluidNode*>(netNodeList.mNodes);
    nodes[0 + netSuperNodesOffset].initialize(name + createNodeName(0 + netSuperNodesOffset), &netInternalFluidConfig, &netInput.fluidDefault);
    nodes[1 + netSuperNodesOffset].initialize(name + createNodeName(1 + netSuperNodesOffset), &netInternalFluidConfig, &netInput.fluidTank);
    /// - Only init the Ground node if this is not a sub-network.
    if (!netIsSubNetwork) {
        nodes[2].initialize(name + ".GROUND", &netInternalFluidConfig, 0);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Initializes this network's links, spotters and solver with their config and input data
///           objects.
////////////////////////////////////////////////////////////////////////////////////////////////////
void TestFluidNetwork::initNetwork()
{
    const int groundOffset = netNodeList.mNumNodes - N_NODES;

    /// - Register sockets with the jumper plugs.

    /// - Initialize the links.
    netLinks.clear();
    conductor1.initialize(netConfig.conductor1, netInput.conductor1, netLinks, Node0 + netSuperNodesOffset, Node1 + netSuperNodesOffset);
    tank.initialize(netConfig.tank, netInput.tank, netLinks, Node1 + netSuperNodesOffset, GROUND + groundOffset);
    leak.initialize(netConfig.leak, netInput.leak, netLinks, Node1 + netSuperNodesOffset, GROUND + groundOffset);

    /// - Initialize the spotters.

    /// - Initialize the solver, only if this is not a sub-network.
    if (!netIsSubNetwork) {
        netSolver.initializeFluidNodes(netNodeList);
        netSolver.initialize(netConfig.netSolver, netLinks);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters before solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void TestFluidNetwork::stepSpottersPre(const double timeStep)
{
    /// - Step network spotters prior to solver step.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]   timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters after solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void TestFluidNetwork::stepSpottersPost(const double timeStep)
{
    /// - Step network spotters after solver step.
}
